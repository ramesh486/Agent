name: Encrypt Secret from Power Automate
on:
  repository_dispatch:
    types: [encrypt-secret]

jobs:
  encrypt-secret:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          pip install pynacl

      - name: Get public key
        id: get_key
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
            echo "API Response: $RESPONSE"
            PUBLIC_KEY=$(echo $RESPONSE | jq -r .key)
            KEY_ID=$(echo $RESPONSE | jq -r .key_id)
            if [ "$PUBLIC_KEY" == "null" ] || [ -z "$PUBLIC_KEY" ]; then
            echo "Failed to fetch the public key. Please check repository and token permissions."
            exit 1
            fi
          echo "public_key=$(echo $RESPONSE | jq -r .key)" >> $GITHUB_OUTPUT
          echo "key_id=$(echo $RESPONSE | jq -r .key_id)" >> $GITHUB_OUTPUT

      - name: Debug public key
        run: |
          echo "Public key length (base64): $(echo "${{ steps.get_key.outputs.public_key }}" | wc -c)"
          echo "Public key: ${{ steps.get_key.outputs.public_key }}"

      - name: Encrypt secret
        id: encrypt
        env:
          SECRET_VALUE: ${{ github.event.client_payload.secret_value }}
        run: |
          python - <<EOF
          from base64 import b64encode, b64decode
          from nacl import encoding, public
          import sys, json, os

          def encrypt(public_key: str, secret_value: str) -> str:
              """Encrypt a secret using libsodium"""
              try:
                  # Remove any whitespace from the public key
                  public_key = public_key.strip()
                  
                  # Decode the public key from base64
                  public_key_bytes = b64decode(public_key)
                  
                  # Print debug information
                  print(f"Decoded public key length: {len(public_key_bytes)} bytes")
                  
                  # Create public key object
                  public_key_obj = public.PublicKey(public_key_bytes)
                  
                  # Create sealed box
                  box = public.SealedBox(public_key_obj)
                  
                  # Encrypt the secret value
                  encrypted = box.encrypt(secret_value.encode('utf-8'))
                  
                  # Return base64 encoded encrypted value
                  return b64encode(encrypted).decode('utf-8')
              except Exception as e:
                  print(f"Error during encryption: {str(e)}")
                  print(f"Public key (base64): {public_key}")
                  raise

          # Get the values from environment
          public_key = "${{ steps.get_key.outputs.public_key }}"
          secret_value = os.environ['SECRET_VALUE']

          try:
              # Encrypt and print the result
              encrypted_value = encrypt(public_key, secret_value)
              print(f"::set-output name=encrypted_value::{encrypted_value}")
          except Exception as e:
              print(f"Failed to encrypt: {str(e)}")
              sys.exit(1)
          EOF

      - name: Create or update secret
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/${{ github.event.client_payload.secret_name }} \
            -d "{\"encrypted_value\":\"${{ steps.encrypt.outputs.encrypted_value }}\",\"key_id\":\"${{ steps.get_key.outputs.key_id }}\"}"
